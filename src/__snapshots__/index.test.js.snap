// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Copy to code Renders component with JSX 1`] = `
.c0 .clipWrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  position: relative;
}

.c0 .clipWrapper:hover button {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .clipWrapper pre {
  margin-top: 0;
}

.c0 .clipWrapper button {
  max-width: 150px;
  height: auto;
  border: none;
  display: none;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em;
  background: rgba(255,255,255,0.5);
}

.c0 .clipWrapper button * {
  margin: 0 2px;
  fill: currentColor;
}

.c0 .clipWrapper button svg {
  background: #eee;
  height: 22px;
  width: auto;
}

<CodeBlock
  element="div"
  highlight={false}
  innerHtml={false}
  onCopy={[Function]}
>
  <styled.div
    as="div"
  >
    <StyledComponent
      as="div"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  & .clipWrapper {
    display: flex;
    flex-flow: column;
    position: relative;

    &:hover button {
      display: flex;
    }

    & pre {
      margin-top: 0;
    }

    & button {
      max-width: 150px;
      height: auto;
      border: none;
      display: none;
      align-items: center;
      position: absolute;
      top: 0;
      right: 0;
      padding: 0.3em;
      background: rgba(255, 255, 255, 0.5);

      & * {
        margin: 0 2px;
        fill: currentColor;
      }
      & svg {
        background: #eee;
        height: 22px;
        width: auto;
      }
    }
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 .clipWrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  position: relative;
}

.c0 .clipWrapper:hover button {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .clipWrapper pre {
  margin-top: 0;
}

.c0 .clipWrapper button {
  max-width: 150px;
  height: auto;
  border: none;
  display: none;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em;
  background: rgba(255,255,255,0.5);
}

.c0 .clipWrapper button * {
  margin: 0 2px;
  fill: currentColor;
}

.c0 .clipWrapper button svg {
  background: #eee;
  height: 22px;
  width: auto;
}

<div
            class="c0"
          >
            <div
              class="clipWrapper"
            >
              <button
                onclick="copyToClipBoard(this)"
              >
                

                <svg
                  enable-background="new 0 0 28 32"
                  height="32px"
                  id="Layer_1"
                  version="1.1"
                  viewBox="0 0 28 32"
                  width="28px"
                  x="0px"
                  xml:space="preserve"
                  xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  y="0px"
                >
                  

                  <g>
                    
	
                    <path
                      d="M1.5,32h25c0.869,0,1.5-0.631,1.5-1.5v-28C28,1.631,27.369,1,26.5,1h-4C22.224,1,22,1.224,22,1.5
		S22.224,2,22.5,2h4C26.813,2,27,2.187,27,2.5v28c0,0.313-0.187,0.5-0.5,0.5h-25C1.187,31,1,30.813,1,30.5v-28
		C1,2.187,1.187,2,1.5,2h4C5.776,2,6,1.776,6,1.5S5.776,1,5.5,1h-4C0.631,1,0,1.631,0,2.5v28C0,31.369,0.631,32,1.5,32z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M5.5,5C5.776,5,6,4.776,6,4.5S5.776,4,5.5,4h-2C3.224,4,3,4.224,3,4.5v24C3,28.776,3.224,29,3.5,29h21
		c0.276,0,0.5-0.224,0.5-0.5v-24C25,4.224,24.776,4,24.5,4h-2C22.224,4,22,4.224,22,4.5S22.224,5,22.5,5H24v23H4V5H5.5z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M9,7h10c1.215,0,2-0.785,2-2V0.5C21,0.224,20.776,0,20.5,0h-13C7.224,0,7,0.224,7,0.5V5
		C7,6.215,7.785,7,9,7z M8,1h12v4c0,0.664-0.337,1-1,1H9C8.337,6,8,5.664,8,5V1z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M8.5,16h11c0.276,0,0.5-0.224,0.5-0.5S19.776,15,19.5,15h-11C8.224,15,8,15.224,8,15.5S8.224,16,8.5,16z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M8.5,12h11c0.276,0,0.5-0.224,0.5-0.5S19.776,11,19.5,11h-11C8.224,11,8,11.224,8,11.5S8.224,12,8.5,12z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M8.5,20h11c0.276,0,0.5-0.224,0.5-0.5S19.776,19,19.5,19h-11C8.224,19,8,19.224,8,19.5S8.224,20,8.5,20z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M8.5,24h11c0.276,0,0.5-0.224,0.5-0.5S19.776,23,19.5,23h-11C8.224,23,8,23.224,8,23.5S8.224,24,8.5,24z"
                      fill="currentColor"
                    />
                    

                  </g>
                  

                </svg>
                

                <span />
              </button>
              <pre>
                <code>
                  
const greeting = (greet = 'Hello') =&gt; (name = 'World') =&gt; {
    return greet + ' ' + name + '!';
  };

                </code>
              </pre>
            </div>
          </div>,
        }
      }
    >
      <div
        className="c0"
      >
        <JSXBlock
          code="
const greeting = (greet = 'Hello') => (name = 'World') => {
    return greet + ' ' + name + '!';
  };
"
        >
          <pre>
            <code>
              
const greeting = (greet = 'Hello') =&gt; (name = 'World') =&gt; {
    return greet + ' ' + name + '!';
  };

            </code>
          </pre>
        </JSXBlock>
      </div>
    </StyledComponent>
  </styled.div>
</CodeBlock>
`;

exports[`Copy to code Renders component with highlight 1`] = `
.c0 .clipWrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  position: relative;
}

.c0 .clipWrapper:hover button {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .clipWrapper pre {
  margin-top: 0;
}

.c0 .clipWrapper button {
  max-width: 150px;
  height: auto;
  border: none;
  display: none;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em;
  background: rgba(255,255,255,0.5);
}

.c0 .clipWrapper button * {
  margin: 0 2px;
  fill: currentColor;
}

.c0 .clipWrapper button svg {
  background: #eee;
  height: 22px;
  width: auto;
}

<CodeBlock
  element="div"
  highlight={true}
  innerHtml={false}
  onCopy={[Function]}
>
  <styled.div
    as="div"
  >
    <StyledComponent
      as="div"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  & .clipWrapper {
    display: flex;
    flex-flow: column;
    position: relative;

    &:hover button {
      display: flex;
    }

    & pre {
      margin-top: 0;
    }

    & button {
      max-width: 150px;
      height: auto;
      border: none;
      display: none;
      align-items: center;
      position: absolute;
      top: 0;
      right: 0;
      padding: 0.3em;
      background: rgba(255, 255, 255, 0.5);

      & * {
        margin: 0 2px;
        fill: currentColor;
      }
      & svg {
        background: #eee;
        height: 22px;
        width: auto;
      }
    }
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 .clipWrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  position: relative;
}

.c0 .clipWrapper:hover button {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .clipWrapper pre {
  margin-top: 0;
}

.c0 .clipWrapper button {
  max-width: 150px;
  height: auto;
  border: none;
  display: none;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em;
  background: rgba(255,255,255,0.5);
}

.c0 .clipWrapper button * {
  margin: 0 2px;
  fill: currentColor;
}

.c0 .clipWrapper button svg {
  background: #eee;
  height: 22px;
  width: auto;
}

<div
            class="c0"
          >
            <div
              class="clipWrapper"
            >
              <button
                onclick="copyToClipBoard(this)"
              >
                

                <svg
                  enable-background="new 0 0 28 32"
                  height="32px"
                  id="Layer_1"
                  version="1.1"
                  viewBox="0 0 28 32"
                  width="28px"
                  x="0px"
                  xml:space="preserve"
                  xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  y="0px"
                >
                  

                  <g>
                    
	
                    <path
                      d="M1.5,32h25c0.869,0,1.5-0.631,1.5-1.5v-28C28,1.631,27.369,1,26.5,1h-4C22.224,1,22,1.224,22,1.5
		S22.224,2,22.5,2h4C26.813,2,27,2.187,27,2.5v28c0,0.313-0.187,0.5-0.5,0.5h-25C1.187,31,1,30.813,1,30.5v-28
		C1,2.187,1.187,2,1.5,2h4C5.776,2,6,1.776,6,1.5S5.776,1,5.5,1h-4C0.631,1,0,1.631,0,2.5v28C0,31.369,0.631,32,1.5,32z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M5.5,5C5.776,5,6,4.776,6,4.5S5.776,4,5.5,4h-2C3.224,4,3,4.224,3,4.5v24C3,28.776,3.224,29,3.5,29h21
		c0.276,0,0.5-0.224,0.5-0.5v-24C25,4.224,24.776,4,24.5,4h-2C22.224,4,22,4.224,22,4.5S22.224,5,22.5,5H24v23H4V5H5.5z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M9,7h10c1.215,0,2-0.785,2-2V0.5C21,0.224,20.776,0,20.5,0h-13C7.224,0,7,0.224,7,0.5V5
		C7,6.215,7.785,7,9,7z M8,1h12v4c0,0.664-0.337,1-1,1H9C8.337,6,8,5.664,8,5V1z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M8.5,16h11c0.276,0,0.5-0.224,0.5-0.5S19.776,15,19.5,15h-11C8.224,15,8,15.224,8,15.5S8.224,16,8.5,16z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M8.5,12h11c0.276,0,0.5-0.224,0.5-0.5S19.776,11,19.5,11h-11C8.224,11,8,11.224,8,11.5S8.224,12,8.5,12z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M8.5,20h11c0.276,0,0.5-0.224,0.5-0.5S19.776,19,19.5,19h-11C8.224,19,8,19.224,8,19.5S8.224,20,8.5,20z"
                      fill="currentColor"
                    />
                    
	
                    <path
                      d="M8.5,24h11c0.276,0,0.5-0.224,0.5-0.5S19.776,23,19.5,23h-11C8.224,23,8,23.224,8,23.5S8.224,24,8.5,24z"
                      fill="currentColor"
                    />
                    

                  </g>
                  

                </svg>
                

                <span />
              </button>
              <pre>
                <code
                  class="hljs coffeescript"
                >
                  
const greeting = 
                  <span
                    class="hljs-function"
                  >
                    <span
                      class="hljs-params"
                    >
                      (greet = 
                      <span
                        class="hljs-string"
                      >
                        'Hello'
                      </span>
                      )
                    </span>
                     =&gt;
                  </span>
                   (name = 
                  <span
                    class="hljs-string"
                  >
                    'World'
                  </span>
                  ) =&gt; {
    
                  <span
                    class="hljs-keyword"
                  >
                    return
                  </span>
                   greet + 
                  <span
                    class="hljs-string"
                  >
                    ' '
                  </span>
                   + name + 
                  <span
                    class="hljs-string"
                  >
                    '!'
                  </span>
                  ;
  };

                </code>
              </pre>
            </div>
          </div>,
        }
      }
    >
      <div
        className="c0"
      >
        <JSXBlock
          code="
const greeting = (greet = 'Hello') => (name = 'World') => {
    return greet + ' ' + name + '!';
  };
"
        >
          <pre>
            <code>
              
const greeting = (greet = 'Hello') =&gt; (name = 'World') =&gt; {
    return greet + ' ' + name + '!';
  };

            </code>
          </pre>
        </JSXBlock>
      </div>
    </StyledComponent>
  </styled.div>
</CodeBlock>
`;

exports[`Copy to code with innerHtml Renders component 1`] = `
.c0 .clipWrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  position: relative;
}

.c0 .clipWrapper:hover button {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .clipWrapper pre {
  margin-top: 0;
}

.c0 .clipWrapper button {
  max-width: 150px;
  height: auto;
  border: none;
  display: none;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em;
  background: rgba(255,255,255,0.5);
}

.c0 .clipWrapper button * {
  margin: 0 2px;
  fill: currentColor;
}

.c0 .clipWrapper button svg {
  background: #eee;
  height: 22px;
  width: auto;
}

<CodeBlock
  element="div"
  highlight={false}
  innerHtml={true}
  onCopy={[Function]}
>
  <styled.div
    as="div"
  >
    <StyledComponent
      as="div"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  & .clipWrapper {
    display: flex;
    flex-flow: column;
    position: relative;

    &:hover button {
      display: flex;
    }

    & pre {
      margin-top: 0;
    }

    & button {
      max-width: 150px;
      height: auto;
      border: none;
      display: none;
      align-items: center;
      position: absolute;
      top: 0;
      right: 0;
      padding: 0.3em;
      background: rgba(255, 255, 255, 0.5);

      & * {
        margin: 0 2px;
        fill: currentColor;
      }
      & svg {
        background: #eee;
        height: 22px;
        width: auto;
      }
    }
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 .clipWrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  position: relative;
}

.c0 .clipWrapper:hover button {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .clipWrapper pre {
  margin-top: 0;
}

.c0 .clipWrapper button {
  max-width: 150px;
  height: auto;
  border: none;
  display: none;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em;
  background: rgba(255,255,255,0.5);
}

.c0 .clipWrapper button * {
  margin: 0 2px;
  fill: currentColor;
}

.c0 .clipWrapper button svg {
  background: #eee;
  height: 22px;
  width: auto;
}

<div
            class="c0"
          >
            &lt;pre&gt;&lt;code&gt;
const greeting = (greet = 'Hello') =&gt; (name = 'World') =&gt; {
    return greet + ' ' + name + '!';
  };
&lt;/code&gt;&lt;/pre&gt;
          </div>,
        }
      }
    >
      <div
        className="c0"
      >
        &lt;pre&gt;&lt;code&gt;
const greeting = (greet = 'Hello') =&gt; (name = 'World') =&gt; {
    return greet + ' ' + name + '!';
  };
&lt;/code&gt;&lt;/pre&gt;
      </div>
    </StyledComponent>
  </styled.div>
</CodeBlock>
`;

exports[`Copy to code with innerHtml Renders component with highlight 1`] = `
.c0 .clipWrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  position: relative;
}

.c0 .clipWrapper:hover button {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .clipWrapper pre {
  margin-top: 0;
}

.c0 .clipWrapper button {
  max-width: 150px;
  height: auto;
  border: none;
  display: none;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em;
  background: rgba(255,255,255,0.5);
}

.c0 .clipWrapper button * {
  margin: 0 2px;
  fill: currentColor;
}

.c0 .clipWrapper button svg {
  background: #eee;
  height: 22px;
  width: auto;
}

<CodeBlock
  element="div"
  highlight={true}
  innerHtml={true}
  onCopy={[Function]}
>
  <styled.div
    as="div"
  >
    <StyledComponent
      as="div"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  & .clipWrapper {
    display: flex;
    flex-flow: column;
    position: relative;

    &:hover button {
      display: flex;
    }

    & pre {
      margin-top: 0;
    }

    & button {
      max-width: 150px;
      height: auto;
      border: none;
      display: none;
      align-items: center;
      position: absolute;
      top: 0;
      right: 0;
      padding: 0.3em;
      background: rgba(255, 255, 255, 0.5);

      & * {
        margin: 0 2px;
        fill: currentColor;
      }
      & svg {
        background: #eee;
        height: 22px;
        width: auto;
      }
    }
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c0 .clipWrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  position: relative;
}

.c0 .clipWrapper:hover button {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 .clipWrapper pre {
  margin-top: 0;
}

.c0 .clipWrapper button {
  max-width: 150px;
  height: auto;
  border: none;
  display: none;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em;
  background: rgba(255,255,255,0.5);
}

.c0 .clipWrapper button * {
  margin: 0 2px;
  fill: currentColor;
}

.c0 .clipWrapper button svg {
  background: #eee;
  height: 22px;
  width: auto;
}

<div
            class="c0"
          >
            &lt;pre&gt;&lt;code&gt;
const greeting = (greet = 'Hello') =&gt; (name = 'World') =&gt; {
    return greet + ' ' + name + '!';
  };
&lt;/code&gt;&lt;/pre&gt;
          </div>,
        }
      }
    >
      <div
        className="c0"
      >
        &lt;pre&gt;&lt;code&gt;
const greeting = (greet = 'Hello') =&gt; (name = 'World') =&gt; {
    return greet + ' ' + name + '!';
  };
&lt;/code&gt;&lt;/pre&gt;
      </div>
    </StyledComponent>
  </styled.div>
</CodeBlock>
`;
